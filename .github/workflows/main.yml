name: CI

on:
  pull_request_target
    
env:
  BASE_BRANCH: ${{ github.base_ref }}
  HEAD_BRANCH: ${{ github.head_ref }}
  PACKAGES: QC_manager

jobs:
  Check_Validation:
    runs-on: [self-hosted]
    outputs:
      validation: ${{ steps.check_validation.outputs.validation }}
      sourcing_branch: ${{ steps.check_validation.outputs.sourcing_branch }}
    steps:
      - name: Start
        run: |
          echo "Start"
          echo "Pull Request Created : From [${{ env.HEAD_BRANCH }}] To [${{ env.BASE_BRANCH }}]"
      - name: Check validation of the pull request
        id: check_validation
        run: |
          echo "Check Start"
          if [ ${{ env.BASE_BRANCH }} == "main" ]; then
            if [ ${{ env.HEAD_BRANCH }} == "stable" ] || [[ ${{ env.HEAD_BRANCH }} == "hotfix"* ]]; then
              echo "::set-output name=validation::true"
              echo "::set-output name=sourcing_branch::${{ env.HEAD_BRANCH }}"
            else
              echo "::set-output name=validation::false"
            fi
          elif [ ${{ env.BASE_BRANCH }} == "stable" ]; then
            if [ ${{ env.HEAD_BRANCH }} == "unstable" ] || [[ ${{ env.HEAD_BRANCH }} == "hotfix"* ]]; then
              echo "::set-output name=validation::true"
              echo "::set-output name=sourcing_branch::${{ env.HEAD_BRANCH }}"
            else
              echo "::set-output name=validation::false"
            fi
          elif [ ${{ env.BASE_BRANCH }} == "unstable" ]; then
            if [ ${{ env.HEAD_BRANCH }} == "develop" ] || [[ ${{ env.HEAD_BRANCH }} == "hotfix"* ]]; then
              echo "::set-output name=validation::true"
              echo "::set-output name=sourcing_branch::${{ env.HEAD_BRANCH }}"
            else
              echo "::set-output name=validation::false"
            fi
          elif [ ${{ env.BASE_BRANCH }} == "develop" ]; then
            if [[ ${{ env.HEAD_BRANCH }} == "feature"* ]] || [[ ${{ env.HEAD_BRANCH }} == "hotfix"* ]]; then
              echo "::set-output name=validation::true"
              echo "::set-output name=sourcing_branch::${{ env.HEAD_BRANCH }}"
            else
              echo "::set-output name=validation::false"
            fi
          elif [[ ${{ env.BASE_BRANCH }} == "feature"* ]]; then
            if [[ ${{ env.HEAD_BRANCH }} == "feature"* ]]; then
              echo "::set-output name=validation::pass"
            else
              echo "::set-output name=validation::false"
            fi
          else
            echo "::set-output name=validation::false"
          fi
  
  Pass:
    needs: Check_Validation
    runs-on: [self-hosted]
    if: needs.Check_Validation.outputs.validation == 'pass'
    steps:
      - name: Notice
        run: echo "Don't need to execute the build test."
  
  Close:
    needs: Check_Validation
    runs-on: [self-hosted]
    if: needs.Check_Validation.outputs.validation == 'false'
    steps:
      - name: Notice
        run: echo "This pull request is not valid."
      - name: Close
        uses: superbrothers/close-pull-request@v3
        with:
          comment: "This pull request is not valid."

  Build-Test:
    needs: Check_Validation
    runs-on: [self-hosted]
    if: needs.Check_Validation.outputs.validation == 'true'
    steps:
      - name: Start
        run: |
          echo "Check Validation : [${{ needs.Check_Validation.outputs.validation }}]"
          echo "The sourcing branch is [${{ needs.Check_Validation.outputs.sourcing_branch }}]"
      - name: Notice
        run: echo "This pull request is valid. It should be checked."
      - name: Pull codes
        run: |
          cd ~/cali_ws
          cd src/autonomy-QC-manager
          git checkout ${{ env.BASE_BRANCH }}
          git pull
          git checkout ${{ needs.Check_Validation.outputs.sourcing_branch }}
          git pull origin ${{ needs.Check_Validation.outputs.sourcing_branch }}
      - name: Back up
        run: |
          cd ~
          if [ ! -d back_up ]; then
            mkdir back_up
            cd back_up
            mkdir build
            mkdir install
          fi
          cd ~/cali_ws
          packages=($(echo ${{ env.PACKAGES }} | tr " " "/"))
          for package in $packages; do
            if [ -d build/${package} ]; then
              mv build/${package} ~/back_up/build
            fi
            if [ -d install/${package} ]; then
              mv install/${package} ~/back_up/install
            fi
          done
      - name: Build
        run: |
          cd ~/cali_ws
          colcon build --packages-up-to ${{ env.PACKAGES }}
      - name: Reject
        if: ${{ failure() }}
        run:
          cd ~;
          if [ -d back_up ]; then
            cd back_up;
            back_up_dirs=`ls`;
            for back_up_dir in $back_up_dirs; do
              cd ~/back_up/$back_up_dir;
              back_up_packages=`ls`;
              for back_up_package in $back_up_packages; do
                if [ -d ~/${{ env.BASE_BRANCH }}_ws/$back_up_dir/$back_up_package ]; then
                  rm -rf ~/${{ env.BASE_BRANCH }}_ws/$back_up_dir/$back_up_package;
                fi;
                mv $back_up_package ~/${{ env.BASE_BRANCH }}_ws/$back_up_dir;
              done;
            done;
          fi;
      - name: Close
        if: ${{ failure() }}
        uses: superbrothers/close-pull-request@v3
        with:
          comment: "Automatic Build is Failed."
      - name: Approve
        run: echo "Automatic Build Test is Approved."
      - name: Checkout_to_main
        if: ${{ always() }}
        run: |
          cd ~
          rm -rf back_up
          cd ~/${{ env.BASE_BRANCH }}_ws
          cd src/${{ github.event.repository.name }}
          git checkout ${{ env.BASE_BRANCH }}
